// <auto-generated />
using System;
using EduConnect.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduConnect.Persistence.Migrations
{
    [DbContext(typeof(EduConnectDbContext))]
    [Migration("20250603131509_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduConnect.Domain.Entities.ClassNotebook", b =>
                {
                    b.Property<Guid>("NotebookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("SummaryNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotebookID");

                    b.HasIndex("ClassID");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ClassNotebooks");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Classroom", b =>
                {
                    b.Property<Guid>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HomeroomTeacherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassID");

                    b.HasIndex("HomeroomTeacherID");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.LessonLog", b =>
                {
                    b.Property<Guid>("LessonLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisciplineNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NotebookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalAbsent")
                        .HasColumnType("int");

                    b.Property<int>("TotalPresent")
                        .HasColumnType("int");

                    b.HasKey("LessonLogID");

                    b.HasIndex("NotebookID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("TeacherID");

                    b.ToTable("LessonLogs");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FromUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFromAI")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ToUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageID");

                    b.HasIndex("FromUserID");

                    b.HasIndex("ToUserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SentBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("SentBy");

                    b.HasIndex("StudentID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("ReminderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("ReminderID");

                    b.HasIndex("ClassID");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentID");

                    b.HasIndex("ClassID");

                    b.HasIndex("ParentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.StudentLessonNote", b =>
                {
                    b.Property<Guid>("StudentNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonLogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoteContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentNoteID");

                    b.HasIndex("LessonLogID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentLessonNotes");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33f41895-b601-4aa1-8dc4-8229a9d07008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "seed-5",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9VYA1FUEOizjgY1tgHU4U+aod7h3CLiBzEPlqRTvBkE5djrNijGJbsUnAEkMKGNQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(2025, 6, 10, 13, 15, 9, 349, DateTimeKind.Utc).AddTicks(5945),
                            SecurityStamp = "seed-4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("09097277-2705-40c2-bce5-51dbd1f4c1e6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "seed-7",
                            Email = "teacher@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAPlkdmwriKMYwT/qBXLfHSRtCTg3oUUEm0Ht60m3yO8DFk4TVWqm/toKh30X8EH3g==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(2025, 6, 10, 13, 15, 9, 400, DateTimeKind.Utc).AddTicks(5203),
                            SecurityStamp = "seed-6",
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("fe014130-bfb5-443b-9989-9c8f90d1065f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "seed-9",
                            Email = "parent@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PARENT@EXAMPLE.COM",
                            NormalizedUserName = "PARENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEDcU1XkMO1QdfgVQV8YAwrK1GeJdrXZM+i8W7/4jBaXEX76+wWwdlliAL61H2iaTmQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(2025, 6, 10, 13, 15, 9, 451, DateTimeKind.Utc).AddTicks(7356),
                            SecurityStamp = "seed-8",
                            TwoFactorEnabled = false,
                            UserName = "parent"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3631e38b-60dd-4d1a-af7f-a26f21c2ef82"),
                            ConcurrencyStamp = "seed-1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("51ef7e08-ff07-459b-8c55-c7ebac505103"),
                            ConcurrencyStamp = "seed-2",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("37a7c5df-4898-4fd4-8e5f-d2abd4b57520"),
                            ConcurrencyStamp = "seed-3",
                            Name = "parent",
                            NormalizedName = "PARENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("33f41895-b601-4aa1-8dc4-8229a9d07008"),
                            RoleId = new Guid("3631e38b-60dd-4d1a-af7f-a26f21c2ef82")
                        },
                        new
                        {
                            UserId = new Guid("09097277-2705-40c2-bce5-51dbd1f4c1e6"),
                            RoleId = new Guid("51ef7e08-ff07-459b-8c55-c7ebac505103")
                        },
                        new
                        {
                            UserId = new Guid("fe014130-bfb5-443b-9989-9c8f90d1065f"),
                            RoleId = new Guid("37a7c5df-4898-4fd4-8e5f-d2abd4b57520")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.ClassNotebook", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.Classroom", "Class")
                        .WithMany("ClassNotebooks")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.User", "Creator")
                        .WithMany("CreatedNotebooks")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Classroom", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.User", "HomeroomTeacher")
                        .WithMany()
                        .HasForeignKey("HomeroomTeacherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HomeroomTeacher");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.LessonLog", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.ClassNotebook", "Notebook")
                        .WithMany("LessonLogs")
                        .HasForeignKey("NotebookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.User", "Teacher")
                        .WithMany("LessonLogs")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notebook");

                    b.Navigation("Schedule");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Message", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.User", "FromUser")
                        .WithMany("SentMessages")
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.User", "ToUser")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ToUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Notification", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.User", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("SentBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.Student", "Student")
                        .WithMany("Notifications")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.Classroom", "Class")
                        .WithMany("Reminders")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.User", "Creator")
                        .WithMany("Reminders")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.Classroom", "Class")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.User", "Teacher")
                        .WithMany("Schedules")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Student", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.Classroom", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.User", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.StudentLessonNote", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.LessonLog", "LessonLog")
                        .WithMany("StudentLessonNotes")
                        .HasForeignKey("LessonLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.Student", "Student")
                        .WithMany("LessonNotes")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LessonLog");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EduConnect.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.ClassNotebook", b =>
                {
                    b.Navigation("LessonLogs");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Classroom", b =>
                {
                    b.Navigation("ClassNotebooks");

                    b.Navigation("Reminders");

                    b.Navigation("Schedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.LessonLog", b =>
                {
                    b.Navigation("StudentLessonNotes");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.Student", b =>
                {
                    b.Navigation("LessonNotes");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("EduConnect.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedNotebooks");

                    b.Navigation("LessonLogs");

                    b.Navigation("Notifications");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("Reminders");

                    b.Navigation("Schedules");

                    b.Navigation("SentMessages");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
